<apex:page showHeader="false" controller="ImpactController">
   <c:CommonIncludes />

<!--<script type="text/javascript" src="{!$Resource.ExtJs}/ext-all-debug.js"></script> -->

     <script>
     
     var impactName;               
     var impactId;
     var errormsg;
	function callCopyPage(){
        window.parent.addTab("ImpactPage?copyId=" + impactId,"Impact","Impact");
	}
	
	var wid = '{!$CurrentPage.parameters.wid}';
        function closeWindow(){
                window.parent.refreshList();
                window.parent.closeTab(wid);
        }
        
        Ext.onReady(function(){
        Ext.QuickTips.init();   
        // This function renders a block of buttons
        var NewBtnhandler = function(button,event) { openPage("ImpactPage","Impact","Impact"); };
        var SaveBtnHandler = function(button,event) {  save(); };
        var CopyBtnHandler = function(button,event) {  callCopyPage(); };
        var ResetBtnHandler = function(button,event) {  resetImpact(); };
        var DeleteBtnHandler = function(button,event) { 
        												Ext.MessageBox.confirm('Delete', 'Are you sure ?', function(btn){
														   if(btn === 'yes'){
														          deleteImpact();
														   }});
        												 };
        var SendNotificationBtnHandler= function(button,event) {  /*deleteIncident();*/ };
        var ClearBtnHandler= function(button,event) {  clearImpact(); };
        var OpenBtnHandler= function(button,event) {  /*deleteIncident();*/ };
        var NextBtnHandler = function (button,event) { nextImpactBtnHandler1();};
        var PreviuosBtnHandler = function (button,event) { previousImpactBtnHandler1();};  
          var SamplePanel = Ext.extend(Ext.Panel, {
            renderTo: 'btnToolbar',
            defaults: {bodyStyle:'border:0px;padding:0px;margin:0px;zoom:0px;'}
        });
        
		new SamplePanel({
            title: '',
            cls:'toolSpCls',
             bodyStyle:'border:0px;padding:0px;margin:0px;zoom:0px;',
            tbar: [ {
                scale: 'medium',
                iconCls: 'bmcNew',
				tooltipType : 'title',
                tooltip: '{!$Label.new}',
                listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcNewOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcNew');          
                     }
                },                
                handler:NewBtnhandler
            } ,' ', {
                scale: 'medium',
                iconCls: 'bmcSave',
				tooltipType : 'title',
                 tooltip:'{!$Label.save}',
                 listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcSaveOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcSave');          
                     }
                },                 
                handler:SaveBtnHandler
            },' ',{
                scale: 'medium',
				tooltipType : 'title',
                 tooltip: '{!$Label.copy}',
                iconCls: 'bmcCopy',
                listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcCopyOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcCopy');          
                     }
                },                
                id:'copyId',
                handler:CopyBtnHandler
            },' ','-',' ',{
                scale: 'medium',
                iconCls: 'bmcDelete',
				tooltipType : 'title',
                 tooltip: '{!$Label.delete}',
                 id:'deleteId',
                 listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcDeleteOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcDelete');          
                     }
                },                 
                handler:DeleteBtnHandler
            },' ',{
                scale: 'medium',
                iconCls: 'bmcClear',
				tooltipType : 'title',
                 tooltip: '{!$Label.clear}',
                  id:'clearId',
                  listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcClearOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcClear');          
                     }
                },                  
                handler:ClearBtnHandler
            },' ',{
                scale: 'medium',
                iconCls: 'bmcReset',
				tooltipType : 'title',
                 tooltip: '{!$Label.Reset}',
                  id:'resetId',
                  listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcResetOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcReset');          
                     }
                },                  
                handler:ResetBtnHandler
            },
            new Ext.Toolbar.Fill(),
            {
                scale: 'medium',
                iconCls: 'bmcPrevious',
				tooltipType : 'title',
                tooltip: '{!$Label.previousRecord}',
                handler:PreviuosBtnHandler,
                
            },' ',{
                scale: 'medium',
                iconCls: 'bmcNext',
				tooltipType : 'title',
                tooltip: '{!$Label.nextRecord}',
                handler:NextBtnHandler,
               
            }           
            ]
        });
        
        impactId = '{!impact.Id}';    
        if(impactId == null ||impactId == ''){                
        Ext.getCmp('deleteId').setDisabled(true);
        Ext.getCmp('copyId').setDisabled(true);
         Ext.getCmp('clearId').setDisabled(true); 
        }
           
    });
    
    function buttonValidator() {
       
       if((impactName != null && impactName != '')&&(errormsg == null||errormsg ==''||errormsg=='Saved successfully.')){   
  
        Ext.getCmp('deleteId').setDisabled(false);
        Ext.getCmp('copyId').setDisabled(false);
        Ext.getCmp('clearId').setDisabled(false);    
       }  
     }
var impactIdSet=window.parent.returnListOfId();
        function previousImpactBtnHandler1(){
        	var idSetString='';
			var i=0;
			while(impactIdSet.length > i){
				if(idSetString==''){
					idSetString='\''+impactIdSet[i]+'\'';
				}else{
					idSetString=idSetString+','+'\''+impactIdSet[i]+'\'';
				}
				i++;
			}
			previousImpactBtnHandler(idSetString);
        
        }

       function nextImpactBtnHandler1(){
        	var idSetString='';
			var i=0;
			while(impactIdSet.length > i){
				if(idSetString==''){
					idSetString='\''+impactIdSet[i]+'\'';
				}else{
					idSetString=idSetString+','+'\''+impactIdSet[i]+'\'';
				}
				i++;
			}
			nextImpactBtnHandler(idSetString);
        
        }
     
    </script>  
    
    <apex:outputPanel id="panelId">
        <script>
        
           impactName = '{!impact.Name}';               
           impactId = '{!impact.Id}';      
        
        </script>
        </apex:outputPanel>
        
         <apex:outputPanel id="errorId">
        <script>
        
           errormsg = '{!messageString}';               
                
        
        </script>
        </apex:outputPanel>
       <apex:outputPanel id="titlePanel">
        <script>
            function updateList(){
               window.parent.refreshList();
            }
        
        </script>
    </apex:outputPanel>  
          
    <apex:outputPanel > <!-- Page body in this panel -->
        <apex:messages />
            <apex:form >
            <apex:actionFunction action="{!newImpact}" name="newImpact"/>
             <apex:actionFunction action="{!clear}" name="clearImpact"/>
             <apex:actionFunction action="{!reset}" name="resetImpact"/>
            <apex:actionFunction action="{!deleteImpact}" name="deleteImpact" onComplete="closeWindow();"/>
			<apex:actionFunction action="{!nextBtnHandler}" name="nextImpactBtnHandler" 
            						rerender="dummyoutputpanel" >
            						<apex:param assignTo="{!tempString}" name="idSetString" value=""/>  
	        </apex:actionFunction>
	        <apex:actionFunction action="{!previousBtnHandler}" name="previousImpactBtnHandler" 
	            						rerender="dummyoutputpanel">
	            						<apex:param assignTo="{!tempString}" name="idSetString" value=""/> 
	        </apex:actionFunction>
            <c:ValidationComponent errorMsgList="{!messageString}" id="validationComponent"></c:ValidationComponent>
     		<apex:actionFunction action="{!save}" name="save" reRender="validationComponent,panelId,errorId" oncomplete="showError();buttonValidator();updateList();"/>
                 <div id="capsule" class="CapsuleDiv1">
                        <table class="clsMainTable" cellspacing="0" cellpadding="0">
                            <tr class="clsRowGreyBg">
                                <td>
                                    <div id="btnToolbar"></div>                                
                                </td>
                            </tr>  
                            <tr>
                                 <td class="clsTopAlignment75">
                                    <apex:outputPanel id="dummyoutputpanel">
                                        <table class="clsTable" cellspacing="0" cellpadding="0">
                                            <tr>
                                                <td colspan="2"><div class="div15pxVspacing"/></td>
                                            </tr>
                                            <tr>
                                                 <td class="clsInputLabelTD"> 
                                                        <apex:outputLabel value="{!$Label.impactID}"/><span class="clsRequiredBlack">*</span>
                                                 </td>
                                                 <td >
                                                       <apex:inputField value="{!impact.Name}" styleClass="clsInputTextBox" /> 
                                                  </td>
                                             </tr>
                                          </table>
                                          <table class="clsTable" cellspacing="0" cellpadding="0">
                                         
                                             <tr>
                                                 <td class="clsInputBoldLabelTDI" colspan="2">
                                                     <apex:outputLabel value="{!$Label.description}" />
                                                 </td>
                                             </tr>
                                             <tr>
                                             <div class="clsRelativePosition">  
                                                 <td class="clsInputTextAreaTD" colspan="2">
                                                    <apex:inputTextarea value="{!impact.description__c}" styleClass="clsInputTextAreaPgWoSidePanel"  />  
                                                 </td>
                                             </div>
                                             </tr>
                                     
                                      <tr>
                                    <td>
                                        <div class="div13pxVspacing"></div>
                                    </td>
                                    </tr>
                                       
                                              <tr>
                                                  <td class="clsInputCheckBox">
                                                            <apex:inputField value="{!impact.inactive__c}" />
                                                            <apex:outputLabel value="{!$Label.inactive}" styleClass="clsInputCheckBoxLabel"/>
                                                  </td>
                                              </tr>
                                      </table>  
                                     </apex:outputPanel> 
                                </td>
                            </tr>
                            <tr class="clsRowGreyBg" valign="middle" width="5%">
                                <td valign="middle" style="width: 100%">
                                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                        <tr>
                                            <td>
                                                 
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>                        
                        </table>
                 </div>    
            </apex:form>
    </apex:outputPanel>  
</apex:page>
                            	